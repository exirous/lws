<?php
/**
 * This is the template for generating the model class of a specified table.
 * - $this: the ModelCode object
 * - $tableName: the table name for this class (prefix is already removed if necessary)
 * - $modelClass: the model class name
 * - $columns: list of table columns (name=>CDbColumnSchema)
 * - $labels: list of attribute labels (name=>label)
 * - $rules: list of validation rules
 * - $relations: list of relations (name=>relation declaration)
 * - $representingColumn: the name of the representing column for the table (string) or
 *   the names of the representing columns (array)
 */

/** @var $tableName string */
/** @var $modelClass string */
/** @var $columns CDbColumnSchema[] */
/** @var $relations array */
/** @var $representingColumn string[] */
/** @var $rules string[] */
/** @var $pivotModels string[] */
/** @var $labels string[] */
?>
<?php echo "<?php\n"; ?>

/**
 * This is the model base class for the table "<?php echo $tableName; ?>".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "<?php echo $modelClass; ?>".
 *
 * Columns in table "<?php echo $tableName; ?>" available as properties of the model,
<?php if(!empty($relations)): ?>
 * followed by relations of table "<?php echo $tableName; ?>" available as properties of the model.
<?php else: ?>
 * and there are no model relations.
<?php endif; ?>
 *
<?php foreach($columns as $column): ?>
 * @property <?php echo $column->type.' $'.$column->name."\n"; ?>
<?php endforeach; ?>
 *
<?php foreach(array_keys($relations) as $name): ?>
 * @property <?php
	$relationData = $this->getRelationData($modelClass, $name);

    if (($relationData[1] != 'Text') || ($relationData[0] != 'CBelongsToRelation'))
    {
        $relationType = $relationData[0];
        $relationModel = $relationData[1];

        switch($relationType) {
            case GxActiveRecord::BELONGS_TO:
            case GxActiveRecord::HAS_ONE:
                echo $relationModel;
                break;
            case GxActiveRecord::HAS_MANY:
            case GxActiveRecord::MANY_MANY:
                echo $relationModel . '[]';
                break;
            default:
                echo 'mixed';
        }
    }
    else
    {
        echo 'array';
    }
	echo ' $' . $name . "\n";
	?>
<?php endforeach; ?>
 */
abstract class <?php echo $this->baseModelClass; ?> extends <?php echo $this->baseClass . "\n"; ?>
{
<?php
//constants
$setValues = array();
foreach ($columns as $column)
{
    if ((strpos($column->dbType, 'enum') === false) && (strpos($column->dbType, 'set') === false))
        continue;

    $name = strtoupper($column->name);
    $values = str_replace('\'', '', $column->dbType);
    $values = substr($values, strpos($values, '(') + 1, strpos($values, ')') - strpos($values, '(') - 1);
    $values = explode(',', $values);

    if (empty($values))
        continue;

    foreach ($values as $value)
    {
        $value_slug = preg_replace('/[^a-z0-9 ]{1,}/i', ' ', $value);
        $setValues[$column->name][$value] = $value_slug;

        $value_slug = preg_replace('/\s{1,}/i', '_', $value_slug);
        $const      = '    const ' . $name . '_' . strtoupper($value_slug) . ' = \'' . $value . '\';';

        echo $const . "\n";
    }
}
?><?php
if (!empty($setValues))
{
?>

    public function getSetValueText($column, $value = null)
    {
        $texts = array(
<?foreach($setValues as $column => $values):?>
            '<?=$column?>' => array(
<?foreach($values as $original => $value):?>
                '<?=$original?>' => Yii::t('app', '<?=ucfirst($value)?>'),
<?php endforeach?>
            ),
<?php endforeach?>
        );

        if ($value)
            return $texts[$column][$value];

        return $texts[$column];
    }
<?
}
?><?php
//text columns
$textColumns = array();
foreach ($relations as $name => $relation)
{
    $rData = $this->getRelationData($modelClass, $name);
    if (($rData[1] != 'Text') || ($rData[0] != 'CBelongsToRelation'))
        continue;

    $textColumns[] = $name;
}
?>

    public function getTextColumns()
    {
<?php if(!empty($textColumns)):?>
        return array('<?=implode('\', \'', $textColumns)?>');
<?php else:?>
        return array();
<?php endif?>
    }

    public function tableName()
    {
        return '<?php echo $tableName; ?>';
    }

    public static function label($n = 1)
    {
        return Yii::t('admin', '<?php echo $modelClass; ?>|<?php echo $this->pluralize($modelClass); ?>', $n);
    }

    public static function representingColumn()
    {
<?php if (is_array($representingColumn)): ?>
        return array(
<?php foreach($representingColumn as $representingColumn_item): ?>
            '<?php echo $representingColumn_item; ?>',
<?php endforeach; ?>
        );
<?php else: ?>
        return '<?php echo $representingColumn; ?>';
<?php endif; ?>
    }

    public function rules()
    {
        return array(
<?php foreach($rules as $rule): ?>
            <?php echo $rule.",\n"; ?>
<?php endforeach; ?>
            array('<?php echo implode(', ', array_keys($columns)); ?>', 'safe', 'on' => 'search'),
<?php if(!empty($textColumns)):?>
            array('<?=implode(', ', $textColumns)?>', 'BTextValidator'),
<?endif?>
        );
    }

    public function relations()
    {
        return array(
<?php foreach($relations as $name=>$relation): ?>
            <?php echo "'{$name}' => {$relation},\n"; ?>
<?php endforeach; ?>
        );
    }

    public function pivotModels()
    {
        return array(
<?php foreach($pivotModels as $relationName=>$pivotModel): ?>
            <?php echo "'{$relationName}' => '{$pivotModel}',\n"; ?>
<?php endforeach; ?>
        );
    }

    public function attributeLabels()
    {
        return array(
<?php foreach($labels as $name=>$label): ?>
<?php if($label === null): ?>
            <?php echo "'{$name}' => null,\n"; ?>
<?php else: ?>
            <?php echo "'{$name}' => {$label},\n"; ?>
<?php endif; ?>
<?php endforeach; ?>
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

<?php foreach($columns as $name=>$column): ?>
<?php $partial = ($column->type==='string' and !$column->isForeignKey); ?>
        $criteria->compare('<?php echo $name; ?>', $this-><?php echo $name; ?><?php echo $partial ? ', true' : ''; ?>);
<?php endforeach; ?>

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}