<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property string $id
 * @property string $nickname
 * @property string $firstname
 * @property string $email
 * @property string $password
 * @property string $ts_id
 * @property string $join_date
 * @property string $birth_date
 * @property string $roster
 * @property string $rank_id
 * @property string $instructor_id
 *
 * @property BattleEvent[] $battleEvents
 * @property News[] $news
 * @property Notification[] $notifications
 * @property Order[] $orders
 * @property Rank $instructor
 * @property Rank $rank
 * @property Award[] $awards
 * @property UserMark[] $userMarks
 */
abstract class BaseUser extends AActiveRecord
{

    public function getTextColumns()
    {
        return array();
    }

    public function tableName()
    {
        return 'user';
    }

    public static function label($n = 1)
    {
        return Yii::t('admin', 'User|Users', $n);
    }

    public static function representingColumn()
    {
        return 'nickname';
    }

    public function rules()
    {
        return array(
            array('nickname, password', 'length', 'max'=>32),
            array('firstname', 'length', 'max'=>128),
            array('email, ts_id', 'length', 'max'=>64),
            array('rank_id, instructor_id', 'length', 'max'=>10),
            array('join_date, birth_date, roster', 'safe'),
            array('nickname, firstname, email, password, ts_id, join_date, birth_date, roster, rank_id, instructor_id', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, nickname, firstname, email, password, ts_id, join_date, birth_date, roster, rank_id, instructor_id', 'safe', 'on' => 'search'),
        );
    }

    public function relations()
    {
        return array(
            'battleEvents' => array(self::HAS_MANY, 'BattleEvent', 'user_id'),
            'news' => array(self::HAS_MANY, 'News', 'issuer_id'),
            'notifications' => array(self::HAS_MANY, 'Notification', 'user_id'),
            'orders' => array(self::MANY_MANY, 'Order', 'order_participant(user_id, order_id)'),
            'instructor' => array(self::BELONGS_TO, 'Rank', 'instructor_id'),
            'rank' => array(self::BELONGS_TO, 'Rank', 'rank_id'),
            'awards' => array(self::MANY_MANY, 'Award', 'user_award(user_id, award_id)'),
            'userMarks' => array(self::HAS_MANY, 'UserMark', 'user_id'),
        );
    }

    public function pivotModels()
    {
        return array(
            'orders' => 'OrderParticipant',
            'awards' => 'UserAward',
        );
    }

    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('app', 'ID'),
            'nickname' => Yii::t('app', 'Nickname'),
            'firstname' => Yii::t('app', 'Firstname'),
            'email' => Yii::t('app', 'Email'),
            'password' => Yii::t('app', 'Password'),
            'ts_id' => Yii::t('app', 'Ts'),
            'join_date' => Yii::t('app', 'Join Date'),
            'birth_date' => Yii::t('app', 'Birth Date'),
            'roster' => Yii::t('app', 'Roster'),
            'rank_id' => null,
            'instructor_id' => null,
            'battleEvents' => null,
            'news' => null,
            'notifications' => null,
            'orders' => null,
            'instructor' => null,
            'rank' => null,
            'awards' => null,
            'userMarks' => null,
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('nickname', $this->nickname, true);
        $criteria->compare('firstname', $this->firstname, true);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('ts_id', $this->ts_id, true);
        $criteria->compare('join_date', $this->join_date, true);
        $criteria->compare('birth_date', $this->birth_date, true);
        $criteria->compare('roster', $this->roster, true);
        $criteria->compare('rank_id', $this->rank_id);
        $criteria->compare('instructor_id', $this->instructor_id);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}