<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property string $id
 * @property string $nickname
 * @property string $fistname
 * @property string $email
 * @property string $password
 * @property string $ts_id
 *
 * @property BattleEvent[] $battleEvents
 * @property News[] $news
 * @property Notification[] $notifications
 * @property Order[] $orders
 * @property Award[] $awards
 * @property Group[] $groups
 * @property UserMark[] $userMarks
 */
abstract class BaseUser extends AActiveRecord
{

    public function getTextColumns()
    {
        return array();
    }

    public function tableName()
    {
        return 'user';
    }

    public static function label($n = 1)
    {
        return Yii::t('admin', 'User|Users', $n);
    }

    public static function representingColumn()
    {
        return 'nickname';
    }

    public function rules()
    {
        return array(
            array('nickname, fistname, email, password', 'length', 'max'=>32),
            array('ts_id', 'length', 'max'=>64),
            array('nickname, fistname, email, password, ts_id', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, nickname, fistname, email, password, ts_id', 'safe', 'on' => 'search'),
        );
    }

    public function relations()
    {
        return array(
            'battleEvents' => array(self::HAS_MANY, 'BattleEvent', 'user_id'),
            'news' => array(self::HAS_MANY, 'News', 'issuer_id'),
            'notifications' => array(self::HAS_MANY, 'Notification', 'user_id'),
            'orders' => array(self::MANY_MANY, 'Order', 'order_participants(user_id, order_id)'),
            'awards' => array(self::MANY_MANY, 'Award', 'user_award(user_id, award_id)'),
            'groups' => array(self::MANY_MANY, 'Group', 'user_group(user_id, group_id)'),
            'userMarks' => array(self::HAS_MANY, 'UserMark', 'user_id'),
        );
    }

    public function pivotModels()
    {
        return array(
            'orders' => 'OrderParticipants',
            'awards' => 'UserAward',
            'groups' => 'UserGroup',
        );
    }

    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('app', 'ID'),
            'nickname' => Yii::t('app', 'Nickname'),
            'fistname' => Yii::t('app', 'Fistname'),
            'email' => Yii::t('app', 'Email'),
            'password' => Yii::t('app', 'Password'),
            'ts_id' => Yii::t('app', 'Ts'),
            'battleEvents' => null,
            'news' => null,
            'notifications' => null,
            'orders' => null,
            'awards' => null,
            'groups' => null,
            'userMarks' => null,
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('nickname', $this->nickname, true);
        $criteria->compare('fistname', $this->fistname, true);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('ts_id', $this->ts_id, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}